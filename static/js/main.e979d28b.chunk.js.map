{"version":3,"sources":["google.ts","constants.ts","scoreManager.ts","circuitView.ts","Standings.tsx","index.tsx","App.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","DETAILS","order","names","jeena","anahat","sangeet","sapna","sahana","gathe","awaazein","sheetIds","GSheetsScoreManager","year","comp","spreadsheetId","client","sheets","spreadsheets","values","get","range","response","result","teamCount","length","judgeCount","findIndex","v","raw","reduce","slice","acc","row","set","log","error","build_totals","allScores","allRaw","allNormal","forEach","val","normal","scores","group","concat","get_stats","_med","_mean","score","median","mean","get_ranks","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","cur","idx","CircuitView","num","comps","compDetails","groups","amed","amean","rmed","rmean","amedRank","ameanRank","rmedRank","rmeanRank","selectGroups","threshold","filter","t","size","this","_comps","Error","debug","zipObject","Promise","all","map","handleComp","keys","scoreManager","get_raw_scores","numJudges","judgeAvgs","i","judgeScores","mapValues","x","finalScores","finalScoresList","compMax","max","compMin","min","buckets","bucket","vals","getStandings","Standings","useState","thresholds","setThresholds","useEffect","a","cv","process","getFullStandings","fetchStuff","Grid","container","item","xs","alignItems","key","style","border","ranks","ReactDOM","render","isSignedIn","setSignedIn","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","JSON","stringify","className","onClick","signOut","justify","lg","signIn","document","getElementById"],"mappings":"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","file":"static/js/main.e979d28b.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","export const DETAILS: Record<string, Record<string, any>> = {\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\"\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\"\n    }\n  }\n};\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./constants\";\nimport { findIndex, reduce, set } from \"lodash\";\nimport { ScoresDict } from \"./types\";\nimport log from \"loglevel\";\n\n// interface ScoreManager {\n//   get_raw_scores: (year: string, comp: string) => Promise<[ScoresDict, number]>;\n// }\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\"\n      });\n\n      const range: { values: string[][] } = response.result;\n\n      const teamCount = range.values.length - 2;\n      const judgeCount =\n        findIndex(range.values[0], v => v === \"Converted Scores\") -\n        findIndex(range.values[0], v => v === \"Raw Scores\");\n\n      const raw = reduce(\n        range.values.slice(2, 2 + teamCount),\n        (acc, row) =>\n          set(acc, row[0], row.slice(row.length - 3 - 2 * judgeCount, row.length - 3 - judgeCount)),\n        {}\n      );\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import log from \"loglevel\";\nimport { median, mean, min, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  toPairs,\n  reverse,\n  sortBy,\n  values,\n  keys,\n  map,\n  range,\n  mapValues,\n  filter,\n  get,\n  size,\n  zipObject\n} from \"lodash\";\n\nimport { DETAILS } from \"./constants\";\nimport { GSheetsScoreManager } from \"./scoreManager\";\nimport { ScoresDict, Group, Stat, Rank } from \"./types\";\n\n/*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\nfunction build_totals(\n  allScores?: Record<string, Record<string, ScoresDict>>\n): [ScoresDict, ScoresDict] {\n  const allRaw: ScoresDict = {};\n  const allNormal: ScoresDict = {};\n\n  forEach(allScores, val => {\n    const raw = val.raw;\n    const normal = val.normal;\n\n    // TODO nicer reduce function?\n    forEach(raw, (scores, group) => {\n      allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n      allNormal[group] =\n        group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n    });\n  });\n\n  return [allRaw, allNormal];\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n\n// Map of group -> value\nfunction get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue = reverse(sortBy(values(pairs), [p => p[1]]));\n\n  // start with 1\n  return reduce(\n    sortedByValue,\n    (acc, cur, idx) => {\n      acc[cur[0]] = idx + 1;\n      return acc;\n    },\n    {} as Record<Group, Rank>\n  );\n}\n\nexport class CircuitView {\n  year: string;\n  comps: any;\n  compDetails: Record<string, Record<string, any>> = {};\n  groups: string[] = [];\n  amed: Record<string, number> = {};\n  amean: Record<string, number> = {};\n  rmed: Record<string, number> = {};\n  rmean: Record<string, number> = {};\n  amedRank: Record<string, number> = {};\n  ameanRank: Record<string, number> = {};\n  rmedRank: Record<string, number> = {};\n  rmeanRank: Record<string, number> = {};\n\n  /* Process competition scores to produce a CircuitView. `num` is the number of competitions to process. If num is -1, processes all competitions. `year` is the year to process. */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const _comps: string[] = DETAILS[year].order;\n\n    if (num > _comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = _comps.length;\n\n    this.comps = _comps.slice(0, num);\n\n    log.debug(\"comps:\", this.comps);\n  }\n\n  async process() {\n    this.compDetails = zipObject(\n      this.comps,\n      await Promise.all(map(this.comps, comp => this.handleComp(comp)))\n    );\n\n    log.debug(this.compDetails);\n\n    // build normals\n    const [raw, normal] = build_totals(this.compDetails);\n    this.groups = keys(raw);\n\n    // evaluate numbers\n    const [amed, amean] = get_stats(raw);\n    const [rmed, rmean] = get_stats(normal);\n    this.amed = amed;\n    this.amean = amean;\n    this.rmed = rmed;\n    this.rmean = rmean;\n\n    // get ranks\n    this.amedRank = get_ranks(this.amed);\n    this.ameanRank = get_ranks(this.amean);\n    this.rmedRank = get_ranks(this.rmed);\n    this.rmeanRank = get_ranks(this.rmean);\n\n    // compute misc. stats\n    // this.attended: Record<Group, Array<string>> = reduce(this.groups, (acc, group) => {\n    //     const list = [comp for comp in this.comps if group in this.comp_details[comp][RAW]];\n    //     const list = filter(group in this.comp_details[comp][RAW] ?\n    //     acc[group] = list\n    // }, {});\n\n    // {\n    //     group: [\n    //         ]\n    //     for group in this.groups\n    // }\n    // this.avg_groups_per_comp = numpy.mean(\n    //     [len(this.comp_details[comp][RAW]) for comp in this.comp_details])\n    // this.avg_judges_per_comp = numpy.mean(\n    //     [len(this.comp_details[comp][\"judge_avgs\"]) for comp in this.comp_details])\n    // this.avg_comps_per_group = numpy.mean(\n    //     [len(this.attended[group]) for group in this.groups])\n    // this.best_score = {\n    //     \"group\": \"Lel\",\n    //     \"comp\": \"Lol\",\n    //     \"score\": 420.69\n    // }\n  }\n\n  /*\n        Handles a single competition.\n        :param comp: name of comp\n        :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n        */\n  async handleComp(comp: string): Promise<Record<string, any>> {\n    const scoreManager = new GSheetsScoreManager();\n\n    const [raw, numJudges] = await scoreManager.get_raw_scores(this.year, comp);\n\n    // normalize for each group for this comp\n    const judgeAvgs = map(range(numJudges), i => {\n      const judgeScores = map(raw, scores => scores[i]);\n      const m = mean(judgeScores);\n      return m;\n    });\n\n    const normal = mapValues(raw, scores => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n    const finalScores = mapValues(normal, scores => mean(scores));\n    const finalScoresList = values(finalScores);\n    const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n    const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n    // TODO judge names\n\n    return {\n      raw,\n      normal,\n      finalScores,\n      max: compMax,\n      min: compMin,\n      judgeAvgs\n    };\n  }\n\n  /*\n        Returns an ordered dictionary of all of the thresholded groups.\n        */\n  getStandings() {\n    const buckets: Record<number, string[]> = {};\n    log.debug(`${size(this.groups)} total groups`);\n\n    // Bucketize all groups\n    forEach(this.groups, group => {\n      const bucket = max([\n        get(this.amedRank, `[${group}]`, size(this.groups)),\n        get(this.ameanRank, `[${group}]`, size(this.groups)),\n        get(this.rmedRank, `[${group}]`, size(this.groups)),\n        get(this.rmeanRank, `[${group}]`, size(this.groups))\n      ]);\n      if (bucket) {\n        buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n      }\n    });\n\n    // Sort each bucket by group name\n    return mapValues(buckets, vals => sortBy(vals));\n  }\n\n  getFullStandings() {\n    const buckets = this.getStandings();\n\n    return mapValues(buckets, groups =>\n      reduce(\n        groups,\n        (acc, group) => {\n          acc[group] = {\n            amed: this.amedRank[group],\n            amean: this.ameanRank[group],\n            rmed: this.rmedRank[group],\n            rmean: this.rmeanRank[group]\n          };\n          return acc;\n        },\n        {} as Record<string, Record<string, number>>\n      )\n    );\n  }\n\n  /* Select groups given a threshold. */\n  selectGroups = (threshold: number) =>\n    filter(\n      this.groups,\n      t =>\n        get(this.amedRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.ameanRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.rmedRank, `[${t}]`, size(this.groups)) <= threshold &&\n        get(this.rmeanRank, `[${t}]`, size(this.groups)) <= threshold\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport log from \"loglevel\";\nimport { CircuitView } from \"./circuitView\";\nimport { map } from \"lodash\";\n\nexport default function Standings() {\n  const [thresholds, setThresholds] = useState(\n    {} as Record<string | number, Record<string, Record<string, number>>>\n  );\n\n  useEffect(() => {\n    async function fetchStuff() {\n      const cv = new CircuitView(5, \"19-20\");\n      await cv.process();\n      setThresholds(cv.getFullStandings());\n    }\n\n    fetchStuff();\n  }, []);\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={1}>\n          Threshold\n        </Grid>\n        <Grid container item xs={11}>\n          <Grid item xs>\n            Team\n          </Grid>\n          <Grid item xs>\n            Abs Median\n          </Grid>\n          <Grid item xs>\n            Abs Mean\n          </Grid>\n          <Grid item xs>\n            Rel Median\n          </Grid>\n          <Grid item xs>\n            Rel Mean\n          </Grid>\n        </Grid>\n      </Grid>\n      {map(thresholds, (groups, t) => (\n        <Grid container alignItems=\"center\" key={t}>\n          <Grid item xs={1}>\n            {t}\n          </Grid>\n          <Grid item xs={11} style={{ border: \"1px solid black\" }}>\n            {map(groups, (ranks, group) => (\n              <Grid container item xs={12} key={group}>\n                <Grid item xs>\n                  {group}\n                </Grid>\n                <Grid item xs>\n                  {ranks.amed}\n                </Grid>\n                <Grid item xs>\n                  {ranks.amean}\n                </Grid>\n                <Grid item xs>\n                  {ranks.rmed}\n                </Grid>\n                <Grid item xs>\n                  {ranks.rmean}\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./google\";\nimport Standings from \"./Standings\";\nimport { Grid } from \"@material-ui/core\";\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi()\n      .auth2.getAuthInstance()\n      .signIn();\n  };\n\n  const handleSignOut = () => {\n    getGapi()\n      .auth2.getAuthInstance()\n      .signOut();\n  };\n\n  return (\n    <div className=\"App\">\n      {isSignedIn ? (\n        <>\n          <button onClick={handleSignOut}>Sign Out!</button>\n          <Grid container justify=\"center\">\n            <Grid item xs={8} lg={5}>\n              <Standings />\n            </Grid>\n          </Grid>\n        </>\n      ) : (\n        <button onClick={handleSignIn}> Sign In!</button>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}