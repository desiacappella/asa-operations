{"version":3,"sources":["google.ts","constants.ts","scoreManager.ts","circuitView.ts","Standings.tsx","Results.tsx","App.tsx","index.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","NOW","DETAILS","order","names","jeena","anahat","sangeet","sapna","sahana","gathe","awaazein","sheetIds","GSheetsScoreManager","year","comp","allDetails","JSON","parse","localStorage","getItem","localData","get","log","info","spreadsheetId","Error","client","sheets","spreadsheets","values","range","response","result","teamCount","length","judgeCount","findIndex","v","raw","reduce","slice","acc","row","set","setItem","stringify","error","CircuitView","num","comps","compDetails","groups","amed","amean","nmed","nmean","amedRank","ameanRank","nmedRank","nmeanRank","fullRows","this","_comps","build_totals","allScores","allRaw","allNormal","forEach","val","normal","scores","group","concat","get_stats","_med","_mean","score","median","mean","get_ranks","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","cur","idx","processCV","cv","a","details","handleComp","keys","map","threshold","max","scoreManager","get_raw_scores","numJudges","judgeAvgs","i","judgeScores","mapValues","x","finalScores","finalScoresList","compMax","compMin","min","getFullStandings","buckets","bucket","size","vals","getStandings","useStyles","makeStyles","icon","color","Standings","useState","setCv","chosenTeams","setChosenTeams","setFullStandings","showRanks","setShowRanks","sort","setSort","classes","useEffect","temp","newFullStandings","newCT","t","loader","debug","handleSort","Grid","container","justify","item","Typography","join","FormControlLabel","control","Switch","onChange","checked","label","TableContainer","Table","TableHead","style","backgroundColor","TableRow","TableCell","align","TableSortLabel","active","direction","onClick","bind","stats","key","round","Results","setComp","setDetails","handleChange","newValue","fetchStuff","Tabs","value","c","Tab","rowSpan","colSpan","team","setLevel","ReactDOM","render","isSignedIn","setSignedIn","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","basename","className","spacing","alignItems","to","Button","clear","signOut","variant","path","xs","md","signIn","document","getElementById"],"mappings":"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","file":"static/js/main.75ffa21d.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","export const NOW = \"19-20\";\n\nexport const DETAILS: Record<string, Record<string, any>> = {\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\"\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\",\n      gathe: \"1RAqltt5vl4uk0gq3RCe4fNWu0taGokv2UP9vjWXO8JY\"\n    }\n  }\n};\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./constants\";\nimport { findIndex, reduce, set, get } from \"lodash\";\nimport { ScoresDict } from \"./types\";\nimport log from \"loglevel\";\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const allDetails = JSON.parse(localStorage.getItem(\"compDetails\") || \"{}\");\n\n    const localData = get(allDetails, `${year}.${comp}`);\n    if (localData) {\n      return localData;\n    }\n\n    log.info(\"Had to fetch from Google sheets\");\n\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      if (!spreadsheetId) {\n        throw new Error(\"no spreadsheet\");\n      }\n\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\"\n      });\n\n      const range: { values: string[][] } = response.result;\n\n      const teamCount = range.values.length - 2;\n      const judgeCount =\n        findIndex(range.values[0], v => v === \"Converted Scores\") -\n        findIndex(range.values[0], v => v === \"Raw Scores\");\n\n      const raw = reduce(\n        range.values.slice(2, 2 + teamCount),\n        (acc, row) =>\n          set(acc, row[0], row.slice(row.length - 3 - 2 * judgeCount, row.length - 3 - judgeCount)),\n        {}\n      );\n\n      set(allDetails, `${year}.${comp}`, [raw, judgeCount]);\n      localStorage.setItem(\"compDetails\", JSON.stringify(allDetails));\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import { median, mean, min, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  toPairs,\n  reverse,\n  sortBy,\n  values,\n  keys,\n  map,\n  range,\n  mapValues,\n  filter,\n  get,\n  size\n} from \"lodash\";\n\nimport { DETAILS } from \"./constants\";\nimport { GSheetsScoreManager } from \"./scoreManager\";\nimport { ScoresDict, Group, Stat, Rank } from \"./types\";\n\nexport class CircuitView {\n  year: Year;\n  comps: string[];\n  compDetails: Record<string, Record<string, any>> = {};\n  groups: string[] = [];\n  amed: Record<string, number> = {};\n  amean: Record<string, number> = {};\n  nmed: Record<string, number> = {};\n  nmean: Record<string, number> = {};\n  amedRank: Record<string, number> = {};\n  ameanRank: Record<string, number> = {};\n  nmedRank: Record<string, number> = {};\n  nmeanRank: Record<string, number> = {};\n  fullRows: Record<string, any>[] = [];\n\n  /**\n   * Process competition scores to produce a CircuitView. `num` is the number of competitions to\n   * process. If num is -1, processes all competitions. `year` is the year to process.\n   */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const _comps: string[] = DETAILS[year].order;\n\n    if (num > _comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = _comps.length;\n\n    this.comps = _comps.slice(0, num);\n  }\n}\n\nexport type Year = string;\n\n/*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\nfunction build_totals(\n  allScores?: Record<string, Record<string, ScoresDict>>\n): [ScoresDict, ScoresDict] {\n  const allRaw: ScoresDict = {};\n  const allNormal: ScoresDict = {};\n\n  forEach(allScores, val => {\n    const raw = val.raw;\n    const normal = val.normal;\n\n    // TODO nicer reduce function?\n    forEach(raw, (scores, group) => {\n      allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n      allNormal[group] =\n        group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n    });\n  });\n\n  return [allRaw, allNormal];\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n\n// Map of group -> value\nfunction get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue = reverse(sortBy(values(pairs), [p => p[1]]));\n\n  // start with 1\n  return reduce(\n    sortedByValue,\n    (acc, cur, idx) => {\n      acc[cur[0]] = idx + 1;\n      return acc;\n    },\n    {} as Record<Group, Rank>\n  );\n}\n\nexport const processCV = async (cv: CircuitView) => {\n  // FIXME For now, do sequentially because we need to cache\n  const details = {} as Record<string, Record<string, any>>;\n  for (const comp of cv.comps) {\n    details[comp] = await handleComp(cv.year, comp);\n  }\n\n  cv.compDetails = details; /* zipObject(\n    cv.comps,\n    await Promise.all(map(cv.comps, comp => handleComp(cv.year, comp)))\n  );*/\n\n  // build normals\n  const [raw, normal] = build_totals(cv.compDetails);\n  cv.groups = keys(raw);\n\n  // evaluate numbers\n  const [amed, amean] = get_stats(raw);\n  const [nmed, nmean] = get_stats(normal);\n  cv.amed = amed;\n  cv.amean = amean;\n  cv.nmed = nmed;\n  cv.nmean = nmean;\n\n  // get ranks\n  cv.amedRank = get_ranks(cv.amed);\n  cv.ameanRank = get_ranks(cv.amean);\n  cv.nmedRank = get_ranks(cv.nmed);\n  cv.nmeanRank = get_ranks(cv.nmean);\n\n  cv.fullRows = map(cv.groups, group => ({\n    group,\n    amed: cv.amed[group],\n    amean: cv.amean[group],\n    nmed: cv.nmed[group],\n    nmean: cv.nmean[group],\n    amedRank: cv.amedRank[group],\n    ameanRank: cv.ameanRank[group],\n    nmedRank: cv.nmedRank[group],\n    nmeanRank: cv.nmeanRank[group],\n    threshold: max(cv.amedRank[group], cv.ameanRank[group], cv.nmedRank[group], cv.nmeanRank[group])\n  }));\n\n  // compute misc. stats\n  // cv.attended: Record<Group, Array<string>> = reduce(cv.groups, (acc, group) => {\n  //     const list = [comp for comp in cv.comps if group in cv.comp_details[comp][RAW]];\n  //     const list = filter(group in cv.comp_details[comp][RAW] ?\n  //     acc[group] = list\n  // }, {});\n\n  // {\n  //     group: [\n  //         ]\n  //     for group in cv.groups\n  // }\n  // cv.avg_groups_per_comp = numpy.mean(\n  //     [len(cv.comp_details[comp][RAW]) for comp in cv.comp_details])\n  // cv.avg_judges_per_comp = numpy.mean(\n  //     [len(cv.comp_details[comp][\"judge_avgs\"]) for comp in cv.comp_details])\n  // cv.avg_comps_per_group = numpy.mean(\n  //     [len(cv.attended[group]) for group in cv.groups])\n  // cv.best_score = {\n  //     \"group\": \"Lel\",\n  //     \"comp\": \"Lol\",\n  //     \"score\": 420.69\n  // }\n};\n\n/**\n * Handles a single competition.\n * :param year: year\n * :param comp: name of comp\n * :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n */\nexport const handleComp = async (year: Year, comp: string): Promise<Record<string, any>> => {\n  const scoreManager = new GSheetsScoreManager();\n\n  const [raw, numJudges] = await scoreManager.get_raw_scores(year, comp);\n\n  // normalize for each group for this comp\n  const judgeAvgs = map(range(numJudges), i => {\n    const judgeScores = map(raw, scores => scores[i]);\n    const m = mean(judgeScores);\n    return m;\n  });\n\n  const normal = mapValues(raw, scores => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n  const finalScores = mapValues(normal, scores => mean(scores));\n  const finalScoresList = values(finalScores);\n  const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n  const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n  // TODO judge names\n\n  return {\n    raw,\n    normal,\n    numJudges,\n    finalScores,\n    max: compMax,\n    min: compMin,\n    judgeAvgs\n  };\n};\n\nexport const getStandings = (cv: CircuitView) => {\n  const buckets: Record<number, string[]> = {};\n\n  // Bucketize all groups\n  forEach(get(cv, \"groups\"), group => {\n    const bucket = max([\n      get(cv.amedRank, `[${group}]`, size(cv.groups)),\n      get(cv.ameanRank, `[${group}]`, size(cv.groups)),\n      get(cv.nmedRank, `[${group}]`, size(cv.groups)),\n      get(cv.nmeanRank, `[${group}]`, size(cv.groups))\n    ]);\n    if (bucket) {\n      buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n    }\n  });\n\n  // Sort each bucket by group name\n  return mapValues(buckets, vals => sortBy(vals));\n};\n\n/*\n        Returns an ordered dictionary of all of the thresholded groups.\n        */\nexport const getFullStandings = (\n  cv: CircuitView\n): Record<number, Record<string, Record<string, number>>> => {\n  const buckets = getStandings(cv);\n\n  return mapValues(buckets, groups =>\n    reduce(\n      groups,\n      (acc, group) => {\n        acc[group] = {\n          amed: cv.amedRank[group],\n          amean: cv.ameanRank[group],\n          nmed: cv.nmedRank[group],\n          nmean: cv.nmeanRank[group]\n        };\n        return acc;\n      },\n      {} as Record<string, Record<string, number>>\n    )\n  );\n};\n\n/* Select groups given a threshold. */\nexport const selectGroups = (cv: CircuitView, threshold: number) => {\n  filter(\n    cv.groups,\n    t =>\n      get(cv.amedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.ameanRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.nmedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.nmeanRank, `[${t}]`, size(cv.groups)) <= threshold\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport log from \"loglevel\";\nimport {\n  Grid,\n  Typography,\n  FormControlLabel,\n  Switch,\n  TableHead,\n  TableRow,\n  TableContainer,\n  Table,\n  TableCell,\n  TableSortLabel,\n  makeStyles\n} from \"@material-ui/core\";\nimport { CircuitView, processCV, getFullStandings } from \"./circuitView\";\nimport { NOW } from \"./constants\";\nimport { keys, map, join, sortBy, get, size, forEach, assign, round } from \"lodash\";\n\nconst useStyles = makeStyles(() => ({\n  icon: {\n    color: \"white !important\"\n  }\n}));\n\nconst HEADER_COLOR = \"#13293d\";\nconst ROW_LIGHT = \"#f3fbff\";\nconst ROW_DARK = \"#dae6f5\";\n\nexport default function Standings() {\n  const [cv, setCv] = useState({} as CircuitView);\n  const [chosenTeams, setChosenTeams] = useState({} as any);\n  const [fullStandings, setFullStandings] = useState({} as any);\n  const [showRanks, setShowRanks] = useState(true);\n  const [sort, setSort] = useState(\"threshold\");\n\n  const classes = useStyles({});\n\n  useEffect(() => {\n    const loader = async () => {\n      const temp = new CircuitView(6, NOW);\n      await processCV(temp);\n\n      const newFullStandings = getFullStandings(temp);\n      const newCT = {} as any;\n\n      forEach(newFullStandings, (groups, t) => {\n        if (size(groups) > 1) {\n          newCT[t] = \"\";\n        } else {\n          newCT[t] = keys(groups)[0];\n        }\n      });\n\n      setChosenTeams(newCT);\n      setFullStandings(newFullStandings);\n      setCv(temp);\n    };\n\n    loader();\n  }, []);\n\n  const handleSwitch = () => {\n    setShowRanks(!showRanks);\n  };\n\n  const handleChange = ({ target }: { target: any }) => {\n    const newChosenTeams = assign({}, chosenTeams);\n    log.debug(target.name, target.value);\n\n    newChosenTeams[Number(target.name.split(\"-\")[1])] = target.value;\n\n    setChosenTeams(newChosenTeams);\n  };\n\n  log.debug(chosenTeams);\n\n  const getStandingsView = () => sortBy(cv.fullRows, [row => row[sort]]);\n\n  const handleSort = (threshold: string) => {\n    setSort(threshold);\n  };\n\n  return (\n    <div>\n      <Grid container justify=\"center\">\n        <Grid item>\n          <Typography>\n            {join(sortBy(get(cv, \"groups\")), \", \")}: <b>{size(get(cv, \"groups\"))} groups</b>\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography>\n            {join(get(cv, \"comps\"), \", \")}: <b>{size(get(cv, \"comps\"))} comps</b>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container justify=\"center\">\n        <Grid item>\n          <FormControlLabel\n            control={<Switch onChange={handleSwitch} checked={showRanks} />}\n            label=\"Only Show Ranks\"\n          />\n        </Grid>\n      </Grid>\n      <TableContainer>\n        <Table>\n          <TableHead style={{ backgroundColor: HEADER_COLOR }}>\n            <TableRow>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"threshold\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"threshold\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Threshold\n                </TableSortLabel>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"group\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"group\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Team\n                </TableSortLabel>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"nmedRank\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"nmedRank\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Normalized Median\n                </TableSortLabel>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"nmeanRank\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"nmeanRank\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Normalized Mean\n                </TableSortLabel>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"amedRank\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"amedRank\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Absolute Median\n                </TableSortLabel>\n              </TableCell>\n              <TableCell align=\"center\">\n                <TableSortLabel\n                  style={{ color: \"white\" }}\n                  active={sort === \"ameanRank\"}\n                  direction=\"asc\"\n                  onClick={handleSort.bind(null, \"ameanRank\")}\n                  classes={{ icon: classes.icon }}\n                >\n                  Absolute Mean\n                </TableSortLabel>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          {map(getStandingsView(), (stats, i) => (\n            <TableRow\n              key={stats.group}\n              style={{ backgroundColor: i % 2 === 0 ? ROW_LIGHT : ROW_DARK }}\n            >\n              <TableCell align=\"center\">{stats.threshold}</TableCell>\n              <TableCell align=\"center\">{stats.group}</TableCell>\n              <TableCell align=\"center\">\n                {showRanks ? stats.amedRank : `${round(stats.amed, 3)} (${stats.amedRank})`}\n              </TableCell>\n              <TableCell align=\"center\">\n                {showRanks ? stats.ameanRank : `${round(stats.amean, 3)} (${stats.ameanRank})`}\n              </TableCell>\n              <TableCell align=\"center\">\n                {showRanks ? stats.nmedRank : `${round(stats.nmed, 3)} (${stats.nmedRank})`}\n              </TableCell>\n              <TableCell align=\"center\">\n                {showRanks ? stats.nmeanRank : `${round(stats.nmean, 3)} (${stats.nmeanRank})`}\n              </TableCell>\n            </TableRow>\n          ))}\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\n/*\n(\n          <Grid container alignItems=\"center\" key={t} style={{ border: \"1px solid black\" }}>\n            <Grid item xs={1}>\n              {stats.threshold}\n            </Grid>\n            <Grid container item xs={11}>\n              <Grid item xs>\n                <Select name={`threshold-${t}`} value={chosenTeams[t]} onChange={handleChange}>\n                  {map(groups, ({}, group) => (\n                    <MenuItem key={group} value={group}>\n                      {group}\n                    </MenuItem>\n                  ))}\n                </Select>\n                {size(groups) > 1 ? <Typography>({size(groups)} groups)</Typography> : \"\"}\n              </Grid>\n              <Grid item xs>\n                {showRanks\n                  ? get(groups[chosenTeams[t]], \"amed\")\n                  : round(cv.amed[chosenTeams[t]], 3)}\n              </Grid>\n              <Grid item xs>\n                {showRanks\n                  ? get(groups[chosenTeams[t]], \"amean\")\n                  : round(cv.amean[chosenTeams[t]], 3)}\n              </Grid>\n              <Grid item xs>\n                {showRanks\n                  ? get(groups[chosenTeams[t]], \"nmed\")\n                  : round(cv.nmed[chosenTeams[t]], 3)}\n              </Grid>\n              <Grid item xs>\n                {showRanks\n                  ? get(groups[chosenTeams[t]], \"nmean\")\n                  : round(cv.nmean[chosenTeams[t]], 3)}\n              </Grid>\n            </Grid>\n          </Grid>\n        )\n        */\n\n/*            <Grid\n              container\n              alignItems=\"center\"\n              key={stats.group}\n              style={{\n                border: \"1px solid black\",\n                backgroundColor: i % 2 === 0 ? \"#deeff5\" : \"#fbfdfe\",\n                padding: \"2px 0\"\n              }}\n              spacing={1}\n            >*/\n","import React, { useState, useEffect } from \"react\";\nimport { Tabs, Tab } from \"@material-ui/core\";\nimport { DETAILS, NOW } from \"./constants\";\nimport { map, get, range, round } from \"lodash\";\nimport { handleComp } from \"./circuitView\";\n\nimport \"./Results.css\";\nimport log from \"loglevel\";\n\nexport default function Results() {\n  const [comp, setComp] = useState(5);\n  const [details, setDetails] = useState({} as any);\n\n  // eslint-disable-next-line\n  const handleChange = async ({}, newValue: number) => {\n    setComp(newValue);\n  };\n\n  useEffect(() => {\n    const fetchStuff = async () => {\n      setDetails(await handleComp(NOW, DETAILS[NOW].order[comp]));\n    };\n\n    fetchStuff();\n  }, [comp]);\n\n  log.debug(details);\n\n  return (\n    <div>\n      <Tabs value={comp} onChange={handleChange}>\n        {map(DETAILS[NOW].order, c => (\n          <Tab key={c} label={c} />\n        ))}\n      </Tabs>\n      <table>\n        <tbody>\n          <tr>\n            <th rowSpan={2}>Team</th>\n            <th colSpan={get(details, \"numJudges\")}>Raw</th>\n            <th colSpan={get(details, \"numJudges\")}>Normal</th>\n            <th rowSpan={2}>Normal Avg</th>\n          </tr>\n          <tr>\n            {map(range(get(details, \"numJudges\")), x => (\n              <th>Judge {x}</th>\n            ))}\n            {map(range(get(details, \"numJudges\")), x => (\n              <th>Judge {x}</th>\n            ))}\n          </tr>\n          {map(get(details, \"raw\"), (scores, team) => (\n            <tr key={team}>\n              <td>{team}</td>\n              {map(scores, (score, i) => (\n                <td key={i}>{round(score, 3)}</td>\n              ))}\n              {map(get(details, `normal.${team}`), (score, i) => (\n                <td key={i}>{round(score, 3)}</td>\n              ))}\n              <td>{round(get(details, `finalScores.${team}`), 3)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./google\";\nimport Standings from \"./Standings\";\nimport { Grid } from \"@material-ui/core\";\n\nimport \"typeface-roboto\";\nimport Results from \"./Results\";\n\nlog.setLevel(\"debug\");\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi()\n      .auth2.getAuthInstance()\n      .signIn();\n  };\n\n  const handleSignOut = () => {\n    localStorage.clear();\n    getGapi()\n      .auth2.getAuthInstance()\n      .signOut();\n  };\n\n  return (\n    <BrowserRouter basename=\"/asa-operations\">\n      <div className=\"App\">\n        {isSignedIn ? (\n          <>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"center\">\n              <Grid item>\n                <Link to=\"/\">Standings</Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/results\">Comp Results</Link>\n              </Grid>\n              <Grid item>\n                <Button onClick={handleSignOut} variant=\"outlined\">\n                  Sign Out!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\">\n              <Switch>\n                <Route path=\"/results\">\n                  <Grid item xs={10}>\n                    <Results />\n                  </Grid>\n                </Route>\n                <Route path=\"/\">\n                  <Grid item xs={8} md={5}>\n                    <Standings />\n                  </Grid>\n                </Route>\n              </Switch>\n            </Grid>\n          </>\n        ) : (\n          <Button onClick={handleSignIn} variant=\"outlined\">\n            {\" \"}\n            Sign In!\n          </Button>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}