{"version":3,"sources":["services/google.ts","services/compDetails.ts","services/scoreManager.ts","services/circuitView.ts","pages/Standings.tsx","pages/Results.tsx","images/logo.png","pages/Report.tsx","App.tsx","index.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","DETAILS","order","names","jeena","anahat","sangeet","mehfil","sahana","gathe","awaazein","sheetIds","sapna","KEY_PREFIX","GSheetsScoreManager","year","comp","yearDetails","JSON","parse","localStorage","getItem","localData","get","log","info","spreadsheetId","Error","client","sheets","spreadsheets","values","range","response","result","teamCount","length","judgeCount","findIndex","v","findLastIndex","indexOf","raw","reduce","slice","acc","row","set","setItem","stringify","error","CircuitView","num","comps","compDetails","groups","amed","amean","rmed","rmean","amedRank","ameanRank","rmedRank","rmeanRank","attended","avgGroupsPerComp","avgJudgesPerComp","avgCompsPerGroup","this","_comps","details","handleComp","e","build_totals","normal","keys","get_stats","get_ranks","group","filter","has","mean","map","det","size","judgeAvgs","g","err","total","allScores","allRaw","allNormal","forEach","val","scores","concat","_med","_mean","score","median","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","cur","idx","a","scoreManager","get_raw_scores","numJudges","i","judgeScores","mapValues","x","finalScores","finalScoresList","compMax","max","compMin","min","getFullStandings","cv","buckets","bucket","vals","getStandings","Standings","useState","setCv","useEffect","temp","process","loader","Grid","container","justify","item","Typography","join","xs","t","alignItems","style","border","ranks","sm","Results","setComp","setDetails","handleChange","newValue","fetchStuff","Tabs","value","onChange","c","Tab","label","team","Report","full","getGroupRanks","stats","getGroupStats","display","margin","height","src","logo","variant","replace","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","round","spacing","Card","find","_n","k","Divider","_a","ReportView","circuitViews","setCircuitViews","setGroup","numComps","cvPromises","Promise","all","fn","last","TextField","select","event","target","sort","MenuItem","App","isSignedIn","setSignedIn","setYear","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","className","to","Button","onClick","clear","signOut","path","lg","signIn","setLevel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fd71d2e.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","interface SingleYear {\n  order: string[];\n  names: Record<string, string>;\n  sheetIds: Record<string, string>;\n}\n\nexport const DETAILS: Record<string, SingleYear> = {\n  \"18-19\": {\n    order: [\"jeena\", \"anahat\", \"sangeet\", \"mehfil\", \"sahana\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      mehfil: \"Mehfil\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      anahat: \"1iFCNADUpzFyqp5UjHsFdSJkSp5C5xU7C0YI3Asf_Q0k\",\n      awaazein: \"1pLN6SKR444CdhzntJjDXnPMlqXtxr3dlTV5lnYWOFXI\",\n      gathe: \"1cg6XptCMQsWfmu7RnncfWP1E5b_FSyFOrDehbwlFUFY\",\n      jeena: \"1B1qh4kKSeAFTV1r3MO4Y5jikyYFGHOe7-c46ha3Y-qc\",\n      mehfil: \"1k7F_gBNM1OfDta5_gT_cHovDmt32jbXw--YMoTk1yc4\",\n      sahana: \"1m9l2EQS3h75dlXz7A8E2JKc5GMXJOHlBS3gPlrgI3b4\",\n      sangeet: \"1pYyUIt2RvZ5AOZwwzIvZKd-KTuUE9uPOpT2BpReqkgo\",\n    },\n  },\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\",\n      gathe: \"1RAqltt5vl4uk0gq3RCe4fNWu0taGokv2UP9vjWXO8JY\",\n      awaazein: \"1KYCn0RWMxbWabw4AuZzzsIyKZyCRnadvqcZVi9t7oDM\",\n    },\n  },\n};\n\nexport const NUM_COMPS = 7;\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./compDetails\";\nimport { findIndex, reduce, set, get, findLastIndex } from \"lodash\";\nimport { ScoresDict } from \"../types\";\nimport log from \"loglevel\";\n\nconst KEY_PREFIX = \"compDetails\";\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  // This stores raw scores from each competition in a dictionary with the key being the year\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const yearDetails = JSON.parse(localStorage.getItem(`${KEY_PREFIX}-${year}`) || \"{}\");\n\n    const localData = get(yearDetails, comp);\n    if (localData) {\n      return localData;\n    }\n\n    log.info(\"Had to fetch from Google sheets\", year, comp);\n\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      if (!spreadsheetId) {\n        throw new Error(\"no spreadsheet\");\n      }\n\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\",\n      });\n\n      const range: { values: string[][] } = response.result;\n\n      // Ignore first two header rows\n      const teamCount = range.values.length - 2;\n      const judgeCount =\n        findIndex(range.values[0], (v) => v === \"Converted Scores\") -\n        // This can be \"Raw Scores\" (in the normal case) or \"Scores after Time Deduction\"\n        findLastIndex(range.values[0], (v) => v.indexOf(\"Scores\") >= 0 && v !== \"Converted Scores\");\n\n      const raw = reduce(\n        // Only look at the team rows\n        range.values.slice(2, 2 + teamCount),\n        (acc, row) =>\n          // Per row, extract the scores in the columns to the left of the Converted Scores. -3 is for the\n          // \"Results\" columns (avg, sanity, placing)\n          set(acc, row[0], row.slice(row.length - 3 - 2 * judgeCount, row.length - 3 - judgeCount)),\n        {}\n      );\n\n      set(yearDetails, comp, [raw, judgeCount]);\n      localStorage.setItem(`${KEY_PREFIX}-${year}`, JSON.stringify(yearDetails));\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import { median, mean, min, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  toPairs,\n  reverse,\n  sortBy,\n  values,\n  keys,\n  map,\n  range,\n  mapValues,\n  filter,\n  get,\n  size,\n  has,\n  set,\n} from \"lodash\";\nimport { DETAILS } from \"./compDetails\";\nimport { GSheetsScoreManager } from \"./scoreManager\";\nimport { ScoresDict, Group, Stat, Rank } from \"../types\";\nimport log from \"loglevel\";\n\nexport class CircuitView {\n  year: Year;\n  comps: string[];\n  compDetails: Record<string, CompDetail> = {};\n  groups: Group[] = [];\n  amed: Record<Group, Stat> = {};\n  amean: Record<Group, Stat> = {};\n  rmed: Record<Group, Stat> = {};\n  rmean: Record<Group, Stat> = {};\n  amedRank: Record<Group, Rank> = {};\n  ameanRank: Record<Group, Rank> = {};\n  rmedRank: Record<Group, Rank> = {};\n  rmeanRank: Record<Group, Rank> = {};\n  attended: Record<Group, string[]> = {};\n  avgGroupsPerComp = 0;\n  avgJudgesPerComp = 0;\n  avgCompsPerGroup = 0;\n\n  /**\n   * Process competition scores to produce a CircuitView. `num` is the number of competitions to\n   * process. If num is -1, processes all competitions. `year` is the year to process.\n   */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const _comps: string[] = DETAILS[year].order;\n\n    if (num > _comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = _comps.length;\n\n    this.comps = _comps.slice(0, num);\n  }\n\n  async process() {\n    // FIXME For now, do sequentially because we need to cache in localStorage internally\n    const details = {} as Record<string, CompDetail>;\n    for (const comp of this.comps) {\n      details[comp] = await handleComp(this.year, comp);\n    }\n\n    this.compDetails = details; /* zipObject(\n    cv.comps,\n    await Promise.all(map(cv.comps, comp => handleComp(cv.year, comp)))\n  );*/\n\n    // build normals\n    const [raw, normal] = build_totals(this.compDetails);\n    this.groups = keys(raw);\n\n    // evaluate numbers\n    const [amed, amean] = get_stats(raw);\n    const [rmed, rmean] = get_stats(normal);\n    this.amed = amed;\n    this.amean = amean;\n    this.rmed = rmed;\n    this.rmean = rmean;\n\n    // get ranks\n    this.amedRank = get_ranks(this.amed);\n    this.ameanRank = get_ranks(this.amean);\n    this.rmedRank = get_ranks(this.rmed);\n    this.rmeanRank = get_ranks(this.rmean);\n\n    // compute misc. stats\n    this.attended = reduce(\n      this.groups,\n      (acc, group) =>\n        set(\n          acc,\n          group,\n          filter(this.comps, (comp) => {\n            // See if this group competed in this comp\n            if (has(this.compDetails[comp].raw, group)) {\n              return true;\n            }\n            return false;\n          })\n        ),\n      {}\n    );\n\n    try {\n      this.avgGroupsPerComp = mean(map(this.compDetails, (det) => size(det.raw)));\n      this.avgJudgesPerComp = mean(map(this.compDetails, (det) => size(det.judgeAvgs)));\n      this.avgCompsPerGroup = mean(map(this.groups, (g) => size(this.attended[g])));\n    } catch (err) {\n      log.error(err);\n      this.avgGroupsPerComp = 0;\n      this.avgJudgesPerComp = 0;\n      this.avgCompsPerGroup = 0;\n    }\n    // cv.best_score = {\n    //     \"group\": \"Lel\",\n    //     \"comp\": \"Lol\",\n    //     \"score\": 420.69\n    // }\n  }\n\n  getGroupStats(group: Group) {\n    return {\n      amed: this.amed[group] || 0,\n      amean: this.amean[group] || 0,\n      rmed: this.rmed[group] || 0,\n      rmean: this.rmean[group] || 0,\n    };\n  }\n\n  getGroupRanks(group: Group) {\n    return {\n      amed: this.amedRank[group] || this.groups.length + 1,\n      amean: this.ameanRank[group] || this.groups.length + 1,\n      rmed: this.rmedRank[group] || this.groups.length + 1,\n      rmean: this.rmeanRank[group] || this.groups.length + 1,\n      total: this.groups.length,\n    };\n  }\n}\n\nexport type Year = string;\n\n/*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\nfunction build_totals(allScores?: Record<string, CompDetail>): [ScoresDict, ScoresDict] {\n  const allRaw: ScoresDict = {};\n  const allNormal: ScoresDict = {};\n\n  forEach(allScores, (val) => {\n    const raw = val.raw;\n    const normal = val.normal;\n\n    // TODO nicer reduce function?\n    forEach(raw, (scores, group) => {\n      allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n      allNormal[group] =\n        group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n    });\n  });\n\n  return [allRaw, allNormal];\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n\n// Map of group -> value\nfunction get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue = reverse(sortBy(values(pairs), [(p) => p[1]]));\n\n  // start with 1\n  return reduce(\n    sortedByValue,\n    (acc, cur, idx) => {\n      acc[cur[0]] = idx + 1;\n      return acc;\n    },\n    {} as Record<Group, Rank>\n  );\n}\n\n/**\n * Handles a single competition.\n * :param year: year\n * :param comp: name of comp\n * :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n */\nexport const handleComp = async (year: Year, comp: string): Promise<CompDetail> => {\n  const scoreManager = new GSheetsScoreManager();\n\n  const [raw, numJudges] = await scoreManager.get_raw_scores(year, comp);\n\n  // normalize for each group for this comp\n  const judgeAvgs = map(range(numJudges), (i) => {\n    const judgeScores = map(raw, (scores) => scores[i]);\n    const m = mean(judgeScores);\n    return m;\n  });\n\n  const normal = mapValues(raw, (scores) => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n  const finalScores = mapValues(normal, (scores) => mean(scores));\n  const finalScoresList = values(finalScores);\n  const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n  const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n  // TODO judge names\n\n  return {\n    raw,\n    normal,\n    finalScores,\n    max: compMax,\n    min: compMin,\n    judgeAvgs,\n  };\n};\n\ninterface CompDetail {\n  raw: Record<string, number[]>;\n  normal: Record<string, number[]>;\n  finalScores: Record<string, number>;\n  max: number;\n  min: number;\n  judgeAvgs: number[];\n}\n\nexport const getStandings = (cv: CircuitView) => {\n  const buckets: Record<number, string[]> = {};\n\n  // Bucketize all groups\n  forEach(get(cv, \"groups\"), (group) => {\n    const bucket = max([\n      get(cv.amedRank, `[${group}]`, size(cv.groups)),\n      get(cv.ameanRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmedRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmeanRank, `[${group}]`, size(cv.groups)),\n    ]);\n    if (bucket) {\n      buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n    }\n  });\n\n  // Sort each bucket by group name\n  return mapValues(buckets, (vals) => sortBy(vals));\n};\n\n/*\n        Returns an ordered dictionary of all of the thresholded groups.\n        */\nexport const getFullStandings = (\n  cv: CircuitView\n): Record<number, Record<string, Record<string, number>>> => {\n  const buckets = getStandings(cv);\n\n  return mapValues(buckets, (groups) =>\n    reduce(\n      groups,\n      (acc, group) => {\n        acc[group] = {\n          amed: cv.amedRank[group],\n          amean: cv.ameanRank[group],\n          rmed: cv.rmedRank[group],\n          rmean: cv.rmeanRank[group],\n        };\n        return acc;\n      },\n      {} as Record<string, Record<string, number>>\n    )\n  );\n};\n\n/* Select groups given a threshold. */\nexport const selectGroups = (cv: CircuitView, threshold: number) => {\n  filter(\n    cv.groups,\n    (t) =>\n      get(cv.amedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.ameanRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmeanRank, `[${t}]`, size(cv.groups)) <= threshold\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CircuitView, getFullStandings } from \"../services/circuitView\";\nimport { NUM_COMPS } from \"../services/compDetails\";\nimport { map, join, sortBy, get, size } from \"lodash\";\n\nexport default function Standings({ year }: { year: string }) {\n  const [cv, setCv] = useState({} as CircuitView);\n\n  useEffect(() => {\n    const loader = async () => {\n      const temp = new CircuitView(NUM_COMPS, year);\n      await temp.process();\n      setCv(temp);\n    };\n\n    loader();\n  }, [year]);\n\n  return (\n    <div>\n      <Grid container justify=\"center\">\n        <Grid item>\n          <Typography>\n            {join(sortBy(get(cv, \"groups\")), \", \")}: <b>{size(get(cv, \"groups\"))} groups</b>\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography>\n            {join(get(cv, \"comps\"), \", \")}: <b>{size(get(cv, \"comps\"))} comps</b>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={1}>\n          <Typography>Threshold</Typography>\n        </Grid>\n        <Grid container item xs={11}>\n          <Grid item xs>\n            <Typography>Team</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Mean</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Mean</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      {map(getFullStandings(cv), (groups, t) => (\n        <Grid container alignItems=\"center\" key={t} style={{ border: \"1px solid black\" }}>\n          <Grid item xs={1}>\n            <Typography>{t}</Typography>\n          </Grid>\n          <Grid item xs={11}>\n            {map(groups, (ranks, group) => (\n              <Grid container item xs={12} key={group}>\n                <Grid item xs>\n                  <Typography>{group}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amean}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmean}</Typography>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Tabs, Tab, Typography } from \"@material-ui/core\";\nimport { DETAILS } from \"../services/compDetails\";\nimport { map, get } from \"lodash\";\nimport { GSheetsScoreManager } from \"../services/scoreManager\";\n\nconst sm = new GSheetsScoreManager();\n\nexport default function Results({ year }: { year: string }) {\n  const [comp, setComp] = useState(0);\n  const [details, setDetails] = useState({} as any);\n\n  // eslint-disable-next-line\n  const handleChange = async ({}, newValue: number) => {\n    setComp(newValue);\n  };\n\n  useEffect(() => {\n    const fetchStuff = async () => {\n      setDetails(get(await sm.get_raw_scores(year, DETAILS[year].order[comp]), \"[0]\"));\n    };\n\n    fetchStuff();\n  }, [comp, year]);\n\n  return (\n    <div>\n      <Tabs value={comp} onChange={handleChange}>\n        {map(DETAILS[year].order, (c) => (\n          <Tab key={c} label={c} />\n        ))}\n      </Tabs>\n      <table>\n        <tbody>\n          {map(details, (scores, team) => (\n            <tr key={team}>\n              <td>\n                <Typography>{team}</Typography>\n              </td>\n              {map(scores, (score, i) => (\n                <td key={i}>\n                  <Typography>{score}</Typography>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.8d17df2f.png\";","import {\n  Card,\n  Divider,\n  Grid,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { find, last, map, range, round, size, slice, sortBy, values } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"../images/logo.png\";\nimport { CircuitView } from \"../services/circuitView\";\nimport { DETAILS } from \"../services/compDetails\";\n\nfunction Report({ year, group, full }: { year: string; group: string; full: CircuitView }) {\n  const ranks = full.getGroupRanks(group);\n  const stats = full.getGroupStats(group);\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <img style={{ margin: \"0 auto\", height: 100 }} src={logo} />\n      </div>\n      <Typography variant=\"h1\">ASA Score Report 2018-19</Typography>\n      <Typography variant=\"h2\">{group.replace(\"_\", \" \")}</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Abs. Median</TableCell>\n              <TableCell>Abs. Mean</TableCell>\n              <TableCell>Rel. Median</TableCell>\n              <TableCell>Rel. Mean</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell variant=\"head\">Rank</TableCell>\n              <TableCell>{ranks.amed}</TableCell>\n              <TableCell>{ranks.amean}</TableCell>\n              <TableCell>{ranks.rmed}</TableCell>\n              <TableCell>{ranks.rmean}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell variant=\"head\">Score</TableCell>\n              <TableCell>{round(stats.amed, 2)}</TableCell>\n              <TableCell>{round(stats.amean, 2)}</TableCell>\n              <TableCell>{round(stats.rmed, 2)}</TableCell>\n              <TableCell>{round(stats.rmean, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Typography variant=\"h2\">Competitions</Typography>\n      <Grid container spacing={2} justify=\"center\">\n        {map(full.attended[group], (comp) => {\n          const det = full.compDetails[comp];\n\n          return (\n            <Grid item xs={9}>\n              <Card>\n                <Typography variant=\"h5\">\n                  {find(DETAILS[year].names, (_n, k) => k === comp)}\n                </Typography>\n                <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography>Normalized Scores</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Max</Typography>\n                    <Typography>{round(det.max, 2)}</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography>Min</Typography>\n                    <Typography>{round(det.min, 2)}</Typography>\n                  </Grid>\n                </Grid>\n                <Divider variant=\"middle\" />\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell />\n                        {map(det.judgeAvgs, (_a, i) => (\n                          <TableCell>{i + 1}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell variant=\"head\">Judge raw avg</TableCell>\n                        {map(det.judgeAvgs, (a) => (\n                          <TableCell>{round(a, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your raw</TableCell>\n                        {map(det.raw[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                      <TableRow>\n                        <TableCell variant=\"head\">Your normalized</TableCell>\n                        {map(det.normal[group], (score) => (\n                          <TableCell>{round(score, 2)}</TableCell>\n                        ))}\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n      <Typography variant=\"h2\">General Circuit Stats</Typography>\n      <TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Total Groups</TableCell>\n              <TableCell>Avg. Groups/Competition</TableCell>\n              <TableCell>Avg. Judges/Competition</TableCell>\n              <TableCell>Avg. Competitions/Group</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>{size(full.groups)}</TableCell>\n              <TableCell>{round(full.avgGroupsPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgJudgesPerComp, 2)}</TableCell>\n              <TableCell>{round(full.avgCompsPerGroup, 2)}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default function ReportView({ year }: { year: string }) {\n  const [circuitViews, setCircuitViews] = useState<CircuitView[]>([]);\n  const [group, setGroup] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fn = async () => {\n      const numComps = DETAILS[year].order.length;\n\n      const cvPromises = map(range(numComps), async (i) => {\n        const cv = new CircuitView(i + 1, year);\n        await cv.process();\n        return cv;\n      });\n      setCircuitViews(await Promise.all(cvPromises));\n    };\n\n    fn();\n  }, [year]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGroup(event.target.value);\n  };\n\n  const full = last(circuitViews);\n  let groups;\n  if (full) {\n    groups = full.groups;\n  }\n\n  return (\n    <>\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          <Typography>Select a team:</Typography>\n        </Grid>\n        <Grid item>\n          <TextField select value={group} onChange={handleChange}>\n            {map(groups && groups.sort(), (g) => (\n              <MenuItem value={g}>{g}</MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n      </Grid>\n      {group && full && <Report group={group} full={full} year={year} />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./services/google\";\nimport Standings from \"./pages/Standings\";\nimport { Grid } from \"@material-ui/core\";\nimport \"typeface-roboto\";\nimport Results from \"./pages/Results\";\nimport Report from \"./pages/Report\";\n\nlog.setLevel(\"debug\");\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n  const [year, setYear] = useState(\"19-20\");\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES,\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi().auth2.getAuthInstance().isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(getGapi().auth2.getAuthInstance().isSignedIn.get());\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi().auth2.getAuthInstance().signIn();\n  };\n\n  const handleSignOut = () => {\n    localStorage.clear();\n    getGapi().auth2.getAuthInstance().signOut();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYear(event.target.value);\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        {isSignedIn ? (\n          <>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"center\">\n              <Grid item>\n                <TextField select label=\"Season\" value={year} onChange={handleChange}>\n                  <MenuItem value=\"18-19\">2018-2019</MenuItem>\n                  <MenuItem value=\"19-20\">2019-2020</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item>\n                <Link to=\"/\">\n                  <Typography>Home/Standings</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/results\">\n                  <Typography>Comp Results</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/report\">\n                  <Typography>Team Reports</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Button onClick={handleSignOut} variant=\"outlined\">\n                  Sign Out!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\">\n              <Switch>\n                <Route path=\"/results\">\n                  <Grid item xs={12} lg={8}>\n                    <Results year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/report\">\n                  <Grid item xs={12} lg={10}>\n                    <Report year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/\">\n                  <Grid item xs={8} lg={5}>\n                    <Standings year={year} />\n                  </Grid>\n                </Route>\n              </Switch>\n            </Grid>\n          </>\n        ) : (\n          <Button onClick={handleSignIn} variant=\"outlined\">\n            {\" \"}\n            Sign In!\n          </Button>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}