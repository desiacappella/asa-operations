{"version":3,"sources":["services/google.ts","services/compDetails.ts","services/scoreManager.ts","services/circuitView.ts","pages/Standings.tsx","pages/Results.tsx","App.tsx","index.tsx"],"names":["CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","getGapi","window","gapi","DETAILS","order","names","jeena","anahat","sangeet","mehfil","sahana","gathe","awaazein","sheetIds","sapna","GSheetsScoreManager","year","comp","yearDetails","JSON","parse","localStorage","getItem","localData","get","log","info","spreadsheetId","Error","client","sheets","spreadsheets","values","range","response","result","teamCount","length","judgeCount","findIndex","v","findLastIndex","indexOf","raw","reduce","slice","acc","row","set","setItem","stringify","error","CircuitView","num","comps","compDetails","groups","amed","amean","rmed","rmean","amedRank","ameanRank","rmedRank","rmeanRank","this","_comps","build_totals","allScores","allRaw","allNormal","forEach","val","normal","scores","group","concat","get_stats","_med","_mean","score","median","mean","get_ranks","statsMap","pairs","toPairs","sortedByValue","reverse","sortBy","p","cur","idx","processCV","cv","a","details","handleComp","keys","scoreManager","get_raw_scores","numJudges","judgeAvgs","map","i","judgeScores","mapValues","x","finalScores","finalScoresList","compMax","max","compMin","min","getFullStandings","buckets","bucket","size","vals","getStandings","Standings","useState","setCv","useEffect","temp","loader","Grid","container","justify","item","Typography","join","xs","t","alignItems","key","style","border","ranks","sm","Results","setComp","setDetails","handleChange","newValue","fetchStuff","Tabs","value","onChange","c","Tab","label","team","setLevel","ReactDOM","render","isSignedIn","setSignedIn","setYear","load","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","listen","className","spacing","TextField","select","event","target","MenuItem","to","Button","onClick","clear","signOut","variant","path","lg","signIn","document","getElementById"],"mappings":"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","file":"static/js/main.0b67a340.chunk.js","sourcesContent":["import log from \"loglevel\";\n\n// Client ID and API key from the Developer Console\nexport const CLIENT_ID = \"94642598479-g1na4rsqrj5vu6dram3r7k6k200s8j6m.apps.googleusercontent.com\";\nexport const API_KEY = \"AIzaSyBMZ3rGb7dWifD8QVjbidUpvxypn9XfiXA\";\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nexport const DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const SCOPES = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nexport function getGapi() {\n  return (window as any).gapi;\n}\n\nexport const subscribe = (subscription: (val: boolean) => void) => {\n  if (getGapi()) {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi()\n              .auth2.getAuthInstance()\n              .isSignedIn.listen(subscription);\n\n            // Handle the initial sign-in state.\n            subscription(\n              getGapi()\n                .auth2.getAuthInstance()\n                .isSignedIn.get()\n            );\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  } else {\n    log.warn(\"gapi not loaded\");\n  }\n};\n","export const DETAILS: Record<string, Record<string, any>> = {\n  \"18-19\": {\n    order: [\"jeena\", \"anahat\", \"sangeet\", \"mehfil\", \"sahana\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      mehfil: \"Mehfil\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      anahat: \"1iFCNADUpzFyqp5UjHsFdSJkSp5C5xU7C0YI3Asf_Q0k\",\n      awaazein: \"1pLN6SKR444CdhzntJjDXnPMlqXtxr3dlTV5lnYWOFXI\",\n      gathe: \"1cg6XptCMQsWfmu7RnncfWP1E5b_FSyFOrDehbwlFUFY\",\n      jeena: \"1B1qh4kKSeAFTV1r3MO4Y5jikyYFGHOe7-c46ha3Y-qc\",\n      mehfil: \"1k7F_gBNM1OfDta5_gT_cHovDmt32jbXw--YMoTk1yc4\",\n      sahana: \"1m9l2EQS3h75dlXz7A8E2JKc5GMXJOHlBS3gPlrgI3b4\",\n      sangeet: \"1pYyUIt2RvZ5AOZwwzIvZKd-KTuUE9uPOpT2BpReqkgo\",\n    },\n  },\n  \"19-20\": {\n    order: [\"jeena\", \"anahat\", \"sahana\", \"sangeet\", \"sapna\", \"gathe\", \"awaazein\"],\n    names: {\n      jeena: \"Jeena\",\n      anahat: \"Anahat\",\n      sangeet: \"Sangeet Saagar\",\n      sapna: \"Steel City Sapna\",\n      sahana: \"Sahana\",\n      gathe: \"Gathe Raho\",\n      awaazein: \"Awaazein\",\n    },\n    sheetIds: {\n      jeena: \"1PERpK3VvawDj-lpZGupI6k5H7aRd5WUrQ5emM6O7ZiQ\",\n      anahat: \"1paQFjuvZSip1qe56qIWT5Un86Cv8BuyG1clHMvFArxg\",\n      sangeet: \"15ok6-LsCmh8qWpZAA_Jw8fHspOITdFYRHfOlpuF9Ous\",\n      sapna: \"11fmeZOdIDqEE3CxT_FeJO4xJV95JGuSi8VO5tvrmiUU\",\n      sahana: \"1xeDesKJ_J9rshPYjGUuxPNSHxbF6cVIOGDgnhm0vJqw\",\n      gathe: \"1RAqltt5vl4uk0gq3RCe4fNWu0taGokv2UP9vjWXO8JY\",\n      awaazein: \"1KYCn0RWMxbWabw4AuZzzsIyKZyCRnadvqcZVi9t7oDM\",\n    },\n  },\n};\n\nexport const NUM_COMPS = 7;\n","import { getGapi } from \"./google\";\nimport { DETAILS } from \"./compDetails\";\nimport { findIndex, reduce, set, get, findLastIndex } from \"lodash\";\nimport { ScoresDict } from \"../types\";\nimport log from \"loglevel\";\n\nconst KEY_PREFIX = \"compDetails\";\n\nexport class GSheetsScoreManager /*implements ScoreManager*/ {\n  // This stores raw scores from each competition in a dictionary with the key being the year\n  async get_raw_scores(year: string, comp: string): Promise<[ScoresDict, number]> {\n    const yearDetails = JSON.parse(localStorage.getItem(`${KEY_PREFIX}-${year}`) || \"{}\");\n\n    const localData = get(yearDetails, comp);\n    if (localData) {\n      return localData;\n    }\n\n    log.info(\"Had to fetch from Google sheets\", year, comp);\n\n    const spreadsheetId = DETAILS[year].sheetIds[comp];\n\n    try {\n      if (!spreadsheetId) {\n        throw new Error(\"no spreadsheet\");\n      }\n\n      const response = await getGapi().client.sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: \"Calculator\",\n      });\n\n      const range: { values: string[][] } = response.result;\n\n      // Ignore first two header rows\n      const teamCount = range.values.length - 2;\n      const judgeCount =\n        findIndex(range.values[0], (v) => v === \"Converted Scores\") -\n        // This can be \"Raw Scores\" (in the normal case) or \"Scores after Time Deduction\"\n        findLastIndex(range.values[0], (v) => v.indexOf(\"Scores\") >= 0 && v !== \"Converted Scores\");\n\n      const raw = reduce(\n        // Only look at the team rows\n        range.values.slice(2, 2 + teamCount),\n        (acc, row) =>\n          // Per row, extract the scores in the columns to the left of the Converted Scores. -3 is for the\n          // \"Results\" columns (avg, sanity, placing)\n          set(acc, row[0], row.slice(row.length - 3 - 2 * judgeCount, row.length - 3 - judgeCount)),\n        {}\n      );\n\n      set(yearDetails, comp, [raw, judgeCount]);\n      localStorage.setItem(`${KEY_PREFIX}-${year}`, JSON.stringify(yearDetails));\n\n      return [raw, judgeCount];\n    } catch (err) {\n      log.error(err);\n      return [{}, 0];\n    }\n  }\n}\n","import { median, mean, min, max } from \"mathjs\";\nimport {\n  reduce,\n  forEach,\n  concat,\n  toPairs,\n  reverse,\n  sortBy,\n  values,\n  keys,\n  map,\n  range,\n  mapValues,\n  filter,\n  get,\n  size,\n} from \"lodash\";\n\nimport { DETAILS } from \"./compDetails\";\nimport { GSheetsScoreManager } from \"./scoreManager\";\nimport { ScoresDict, Group, Stat, Rank } from \"../types\";\n\nexport class CircuitView {\n  year: Year;\n  comps: string[];\n  compDetails: Record<string, Record<string, any>> = {};\n  groups: string[] = [];\n  amed: Record<string, number> = {};\n  amean: Record<string, number> = {};\n  rmed: Record<string, number> = {};\n  rmean: Record<string, number> = {};\n  amedRank: Record<string, number> = {};\n  ameanRank: Record<string, number> = {};\n  rmedRank: Record<string, number> = {};\n  rmeanRank: Record<string, number> = {};\n\n  /**\n   * Process competition scores to produce a CircuitView. `num` is the number of competitions to\n   * process. If num is -1, processes all competitions. `year` is the year to process.\n   */\n  constructor(num: number, year: string) {\n    this.year = year;\n\n    // First, convert (num, year) to comps\n    const _comps: string[] = DETAILS[year].order;\n\n    if (num > _comps.length) {\n      throw new Error(\"Illegal argument: num\");\n    }\n\n    if (num < 0) num = _comps.length;\n\n    this.comps = _comps.slice(0, num);\n  }\n}\n\nexport type Year = string;\n\n/*\n    Builds up all of the raw and normalized scores across the given competitions for all groups.\n    :param all_scores: all competition scores\n    :return: tuple of [raw scores dict, normalized scores dict]\n    */\nfunction build_totals(\n  allScores?: Record<string, Record<string, ScoresDict>>\n): [ScoresDict, ScoresDict] {\n  const allRaw: ScoresDict = {};\n  const allNormal: ScoresDict = {};\n\n  forEach(allScores, (val) => {\n    const raw = val.raw;\n    const normal = val.normal;\n\n    // TODO nicer reduce function?\n    forEach(raw, (scores, group) => {\n      allRaw[group] = group in allRaw ? concat(allRaw[group], scores) : scores;\n      allNormal[group] =\n        group in allNormal ? concat(allNormal[group], normal[group]) : normal[group];\n    });\n  });\n\n  return [allRaw, allNormal];\n}\n\n/*\n    Converts dictionary of scores to dictionaries of median and mean values\n    :param scores: dictionary of group to list of scores\n    :return: median and mean dictionaries\n    */\nfunction get_stats(scores?: ScoresDict) {\n  const _med: Record<Group, Stat> = {};\n  const _mean: Record<Group, Stat> = {};\n\n  forEach(scores, (score, group) => {\n    _med[group] = median(score);\n    _mean[group] = mean(score);\n  });\n\n  return [_med, _mean];\n}\n\n// Map of group -> value\nfunction get_ranks(statsMap: Record<Group, Stat>): Record<Group, Rank> {\n  const pairs = toPairs(statsMap);\n  const sortedByValue = reverse(sortBy(values(pairs), [(p) => p[1]]));\n\n  // start with 1\n  return reduce(\n    sortedByValue,\n    (acc, cur, idx) => {\n      acc[cur[0]] = idx + 1;\n      return acc;\n    },\n    {} as Record<Group, Rank>\n  );\n}\n\nexport const processCV = async (cv: CircuitView) => {\n  // FIXME For now, do sequentially because we need to cache\n  const details = {} as Record<string, Record<string, any>>;\n  for (const comp of cv.comps) {\n    details[comp] = await handleComp(cv.year, comp);\n  }\n\n  cv.compDetails = details; /* zipObject(\n    cv.comps,\n    await Promise.all(map(cv.comps, comp => handleComp(cv.year, comp)))\n  );*/\n\n  // build normals\n  const [raw, normal] = build_totals(cv.compDetails);\n  cv.groups = keys(raw);\n\n  // evaluate numbers\n  const [amed, amean] = get_stats(raw);\n  const [rmed, rmean] = get_stats(normal);\n  cv.amed = amed;\n  cv.amean = amean;\n  cv.rmed = rmed;\n  cv.rmean = rmean;\n\n  // get ranks\n  cv.amedRank = get_ranks(cv.amed);\n  cv.ameanRank = get_ranks(cv.amean);\n  cv.rmedRank = get_ranks(cv.rmed);\n  cv.rmeanRank = get_ranks(cv.rmean);\n\n  // compute misc. stats\n  // cv.attended: Record<Group, Array<string>> = reduce(cv.groups, (acc, group) => {\n  //     const list = [comp for comp in cv.comps if group in cv.comp_details[comp][RAW]];\n  //     const list = filter(group in cv.comp_details[comp][RAW] ?\n  //     acc[group] = list\n  // }, {});\n\n  // {\n  //     group: [\n  //         ]\n  //     for group in cv.groups\n  // }\n  // cv.avg_groups_per_comp = numpy.mean(\n  //     [len(cv.comp_details[comp][RAW]) for comp in cv.comp_details])\n  // cv.avg_judges_per_comp = numpy.mean(\n  //     [len(cv.comp_details[comp][\"judge_avgs\"]) for comp in cv.comp_details])\n  // cv.avg_comps_per_group = numpy.mean(\n  //     [len(cv.attended[group]) for group in cv.groups])\n  // cv.best_score = {\n  //     \"group\": \"Lel\",\n  //     \"comp\": \"Lol\",\n  //     \"score\": 420.69\n  // }\n};\n\n/**\n * Handles a single competition.\n * :param year: year\n * :param comp: name of comp\n * :return: raw and normalized score dictionary, mapping group to list of scores for this comp\n */\nexport const handleComp = async (year: Year, comp: string): Promise<Record<string, any>> => {\n  const scoreManager = new GSheetsScoreManager();\n\n  const [raw, numJudges] = await scoreManager.get_raw_scores(year, comp);\n\n  // normalize for each group for this comp\n  const judgeAvgs = map(range(numJudges), (i) => {\n    const judgeScores = map(raw, (scores) => scores[i]);\n    const m = mean(judgeScores);\n    return m;\n  });\n\n  const normal = mapValues(raw, (scores) => map(scores, (x, i) => (x * 100) / judgeAvgs[i]));\n\n  const finalScores = mapValues(normal, (scores) => mean(scores));\n  const finalScoresList = values(finalScores);\n  const compMax = finalScoresList.length ? max(finalScoresList) : 0;\n  const compMin = finalScoresList.length ? min(finalScoresList) : 0;\n  // TODO judge names\n\n  return {\n    raw,\n    normal,\n    finalScores,\n    max: compMax,\n    min: compMin,\n    judgeAvgs,\n  };\n};\n\nexport const getStandings = (cv: CircuitView) => {\n  const buckets: Record<number, string[]> = {};\n\n  // Bucketize all groups\n  forEach(get(cv, \"groups\"), (group) => {\n    const bucket = max([\n      get(cv.amedRank, `[${group}]`, size(cv.groups)),\n      get(cv.ameanRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmedRank, `[${group}]`, size(cv.groups)),\n      get(cv.rmeanRank, `[${group}]`, size(cv.groups)),\n    ]);\n    if (bucket) {\n      buckets[bucket] = bucket in buckets ? concat(buckets[bucket], group) : [group];\n    }\n  });\n\n  // Sort each bucket by group name\n  return mapValues(buckets, (vals) => sortBy(vals));\n};\n\n/*\n        Returns an ordered dictionary of all of the thresholded groups.\n        */\nexport const getFullStandings = (\n  cv: CircuitView\n): Record<number, Record<string, Record<string, number>>> => {\n  const buckets = getStandings(cv);\n\n  return mapValues(buckets, (groups) =>\n    reduce(\n      groups,\n      (acc, group) => {\n        acc[group] = {\n          amed: cv.amedRank[group],\n          amean: cv.ameanRank[group],\n          rmed: cv.rmedRank[group],\n          rmean: cv.rmeanRank[group],\n        };\n        return acc;\n      },\n      {} as Record<string, Record<string, number>>\n    )\n  );\n};\n\n/* Select groups given a threshold. */\nexport const selectGroups = (cv: CircuitView, threshold: number) => {\n  filter(\n    cv.groups,\n    (t) =>\n      get(cv.amedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.ameanRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmedRank, `[${t}]`, size(cv.groups)) <= threshold &&\n      get(cv.rmeanRank, `[${t}]`, size(cv.groups)) <= threshold\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CircuitView, processCV, getFullStandings } from \"../services/circuitView\";\nimport { NUM_COMPS } from \"../services/compDetails\";\nimport { map, join, sortBy, get, size } from \"lodash\";\n\nexport default function Standings({ year }: { year: string }) {\n  const [cv, setCv] = useState({} as CircuitView);\n\n  useEffect(() => {\n    const loader = async () => {\n      const temp = new CircuitView(NUM_COMPS, year);\n      await processCV(temp);\n      setCv(temp);\n    };\n\n    loader();\n  }, [year]);\n\n  return (\n    <div>\n      <Grid container justify=\"center\">\n        <Grid item>\n          <Typography>\n            {join(sortBy(get(cv, \"groups\")), \", \")}: <b>{size(get(cv, \"groups\"))} groups</b>\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography>\n            {join(get(cv, \"comps\"), \", \")}: <b>{size(get(cv, \"comps\"))} comps</b>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={1}>\n          <Typography>Threshold</Typography>\n        </Grid>\n        <Grid container item xs={11}>\n          <Grid item xs>\n            <Typography>Team</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Abs Mean</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Median</Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography>Rel Mean</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      {map(getFullStandings(cv), (groups, t) => (\n        <Grid container alignItems=\"center\" key={t} style={{ border: \"1px solid black\" }}>\n          <Grid item xs={1}>\n            <Typography>{t}</Typography>\n          </Grid>\n          <Grid item xs={11}>\n            {map(groups, (ranks, group) => (\n              <Grid container item xs={12} key={group}>\n                <Grid item xs>\n                  <Typography>{group}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.amean}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmed}</Typography>\n                </Grid>\n                <Grid item xs>\n                  <Typography>{ranks.rmean}</Typography>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Tabs, Tab, Typography } from \"@material-ui/core\";\nimport { DETAILS } from \"../services/compDetails\";\nimport { map, get } from \"lodash\";\nimport { GSheetsScoreManager } from \"../services/scoreManager\";\n\nconst sm = new GSheetsScoreManager();\n\nexport default function Results({ year }: { year: string }) {\n  const [comp, setComp] = useState(0);\n  const [details, setDetails] = useState({} as any);\n\n  // eslint-disable-next-line\n  const handleChange = async ({}, newValue: number) => {\n    setComp(newValue);\n  };\n\n  useEffect(() => {\n    const fetchStuff = async () => {\n      setDetails(get(await sm.get_raw_scores(year, DETAILS[year].order[comp]), \"[0]\"));\n    };\n\n    fetchStuff();\n  }, [comp, year]);\n\n  return (\n    <div>\n      <Tabs value={comp} onChange={handleChange}>\n        {map(DETAILS[year].order, (c) => (\n          <Tab key={c} label={c} />\n        ))}\n      </Tabs>\n      <table>\n        <tbody>\n          {map(details, (scores, team) => (\n            <tr key={team}>\n              <td>\n                <Typography>{team}</Typography>\n              </td>\n              {map(scores, (score, i) => (\n                <td key={i}>\n                  <Typography>{score}</Typography>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button, MenuItem, TextField, Typography } from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport log from \"loglevel\";\nimport { CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES, getGapi } from \"./services/google\";\nimport Standings from \"./pages/Standings\";\nimport { Grid } from \"@material-ui/core\";\nimport \"typeface-roboto\";\nimport Results from \"./pages/Results\";\n\nlog.setLevel(\"debug\");\n\nexport default function App() {\n  const [isSignedIn, setSignedIn] = useState(false);\n  const [year, setYear] = useState(\"19-20\");\n\n  useEffect(() => {\n    getGapi().load(\"client:auth2\", () => {\n      getGapi()\n        .client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES,\n        })\n        .then(\n          () => {\n            // Listen for sign-in state changes.\n            getGapi().auth2.getAuthInstance().isSignedIn.listen(setSignedIn);\n\n            // Handle the initial sign-in state.\n            setSignedIn(getGapi().auth2.getAuthInstance().isSignedIn.get());\n          },\n          (error: any) => {\n            log.error(JSON.stringify(error, null, 2));\n          }\n        );\n    });\n  }, []);\n\n  const handleSignIn = () => {\n    getGapi().auth2.getAuthInstance().signIn();\n  };\n\n  const handleSignOut = () => {\n    localStorage.clear();\n    getGapi().auth2.getAuthInstance().signOut();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setYear(event.target.value);\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        {isSignedIn ? (\n          <>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"center\">\n              <Grid item>\n                <TextField select label=\"Season\" value={year} onChange={handleChange}>\n                  <MenuItem value=\"18-19\">2018-2019</MenuItem>\n                  <MenuItem value=\"19-20\">2019-2020</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item>\n                <Link to=\"/\">\n                  <Typography>Standings</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/results\">\n                  <Typography>Comp Results</Typography>\n                </Link>\n              </Grid>\n              <Grid item>\n                <Button onClick={handleSignOut} variant=\"outlined\">\n                  Sign Out!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\">\n              <Switch>\n                <Route path=\"/results\">\n                  <Grid item xs={12} lg={8}>\n                    <Results year={year} />\n                  </Grid>\n                </Route>\n                <Route path=\"/\">\n                  <Grid item xs={8} lg={5}>\n                    <Standings year={year} />\n                  </Grid>\n                </Route>\n              </Switch>\n            </Grid>\n          </>\n        ) : (\n          <Button onClick={handleSignIn} variant=\"outlined\">\n            {\" \"}\n            Sign In!\n          </Button>\n        )}\n      </div>\n    </BrowserRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}